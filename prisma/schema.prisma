// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Utilisateur {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  motDePasse      String
  role            String    @default("Employe") // Admin, RH, Employe
  resetToken      String?   @map("reset_token") // Champ nullable pour le token de réinitialisation
  resetTokenExpiry DateTime? @map("reset_token_expiry") // Date d'expiration nullable
  dateCreation    DateTime  @default(now())
  actif           Boolean   @default(true)
  employe         Employe?  @relation("UtilisateurEmploye")
  employeId       Int?      @unique
  conges          Conge[]   // Relation opposée pour les congés
  notifications   Notification[] // Relation opposée pour les notifications
  prefs           Json?     // Ajout pour stocker les préférences (langue, notificationsActives, etc.)
}

model Employe {
  id           Int          @id @default(autoincrement())
  matricule    String       @unique
  nom          String
  prenom       String
  email        String       @unique
  telephone    String?
  dateEmbauche DateTime?
  dateDepart   DateTime?
  competences  String?
  actif        Boolean      @default(true)
  utilisateur  Utilisateur? @relation("UtilisateurEmploye", fields: [utilisateurId], references: [id])
  utilisateurId Int?        @unique
  departement  Departement? @relation(fields: [departementId], references: [id])
  departementId Int?
  conges       Conge[]      // Relation pour les congés de cet employé
  permissions  Permission[]
  presences    Presence[]
  salaires     Salaire[]
}

model Departement {
  id          Int      @id @default(autoincrement())
  nomDepartement String @unique
  description String?
  employes    Employe[]
}

model Conge {
  id          Int      @id @default(autoincrement())
  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id])
  utilisateurId Int
  employe     Employe? @relation(fields: [employeId], references: [id]) // Relation facultative avec Employe
  employeId   Int?     // Champ nullable pour lier à Employe si nécessaire
  startDate   DateTime
  endDate     DateTime
  type        String   // "conge" ou "permission"
  status      String   @default("En attente") // "En attente", "Approuvé", "Rejeté"
  reason      String
  createdAt   DateTime @default(now())
}

model Permission {
  id          Int      @id @default(autoincrement())
  employeId   Int
  employe     Employe  @relation(fields: [employeId], references: [id])
  date        DateTime
  heureDebut  DateTime
  heureFin    DateTime?
  motif       String?
  statut      String   @default("Pending") // Pending, Approved, Rejected
  dateCreation DateTime @default(now())
}

model Presence {
  id           Int      @id @default(autoincrement())
  employeId    Int
  employe      Employe  @relation(fields: [employeId], references: [id])
  heureArrivee DateTime
  heureDepart  DateTime?
  trajet       DateTime?
  statut       String   @default("Present") // Present, Absent, Conge, Maladie, Retard, AbsentSansJustification
  dateCreation DateTime @default(now())
}

model Salaire {
  id           Int      @id @default(autoincrement())
  employeId    Int
  employe      Employe  @relation(fields: [employeId], references: [id])
  salaireBase  Float
  primes       Float    @default(0)
  deductions   Float    @default(0)
  mois         DateTime
  datePaiement DateTime?
  statut       String   @default("En attente") // En attente, Paye, Salaire non regu
  dateCreation DateTime @default(now())
}

model Rapport {
  id           Int      @id @default(autoincrement())
  type         String   @default("PDF") // PDF, Excel
  contenu      String?
  dateGeneration DateTime @default(now())
  dateCreation DateTime @default(now())
}
model Notification {
  id           Int      @id @default(autoincrement())
  utilisateurId Int
  utilisateur  Utilisateur @relation(fields: [utilisateurId], references: [id])
  message      String
  lu           Boolean  @default(false)
  dateCreation DateTime @default(now())
  lien         String?  // Optionnel : lien vers une page spécifique (ex. : détails d'un congé)
}
